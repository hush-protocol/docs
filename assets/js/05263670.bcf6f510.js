"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[388],{4371:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=t(4848),n=t(8453);const i={},s=void 0,o={id:"tutorial-recovery-canister/how-to-create-recovery-canister",title:"how-to-create-recovery-canister",description:"Creating a Recovery Canister",source:"@site/docs/tutorial-recovery-canister/how-to-create-recovery-canister.md",sourceDirName:"tutorial-recovery-canister",slug:"/tutorial-recovery-canister/how-to-create-recovery-canister",permalink:"/docs/docs/tutorial-recovery-canister/how-to-create-recovery-canister",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-recovery-canister/how-to-create-recovery-canister.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Recovery Canister",permalink:"/docs/docs/category/tutorial---recovery-canister"}},c={},d=[{value:"Creating a Recovery Canister",id:"creating-a-recovery-canister",level:2},{value:"Example Recovery Canister",id:"example-recovery-canister",level:3},{value:"How to read and write data",id:"how-to-read-and-write-data",level:3},{value:"Example of reading and writing data in recovery canister",id:"example-of-reading-and-writing-data-in-recovery-canister",level:3}];function l(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"creating-a-recovery-canister",children:"Creating a Recovery Canister"}),"\n",(0,a.jsxs)(r.p,{children:["A ",(0,a.jsx)(r.strong,{children:"recovery canister"})," is an independent canister responsible for verifying a user's identity or credentials during the recovery process. Examples of recovery methods include email verification, Google account verification, or Aadhaar verification."]}),"\n",(0,a.jsxs)(r.p,{children:["You can create custom recovery canisters that accept arbitrary inputs, validate them, and return a ",(0,a.jsx)(r.code,{children:"true"})," or ",(0,a.jsx)(r.code,{children:"false"})," result."]}),"\n",(0,a.jsx)(r.h3,{id:"example-recovery-canister",children:"Example Recovery Canister"}),"\n",(0,a.jsx)(r.p,{children:"Here\u2019s an example of a recovery canister that verifies a user's Aadhaar credentials using a zero-knowledge (ZK) proof:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-rust",children:"#[ic_cdk::update]\nasync fn verify(args: String, storage_index: u64) -> Result<bool, String> {\n    // Parse the input arguments into AadhaarArgs struct\n    \n    // Return the result of the verification (true/false)\n    Ok(true)\n}\n"})}),"\n",(0,a.jsx)(r.p,{children:"This is an example of a simple recovery canister which returns true all the time . Now inside this you can call arbitrary code . For example , the code below verifies a zk proof"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-rust",children:"#[ic_cdk::update]\nasync fn verify(args: String, storage_index: u64) -> Result<bool, String> {\n    // Parse the input arguments into AadhaarArgs struct\n    let aadhaar_args: AadhaarArgs = serde_json::from_str(&args).unwrap();\n    \n    // Perform Aadhaar verification using a ZK proof\n    let result = zk::AadhaarVerifier::verify(&aadhaar_args.json_proof, &aadhaar_args.public_input_json);\n    \n    // Return the result of the verification (true/false)\n    Ok(result)\n}\n"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.a,{href:"https://github.com/hush-protocol/core-webapp/tree/main/src/backend/recovery/aadhaar_digital_zk_verifier",children:"Full Source code for zk verifier recovery canister"})}),"\n",(0,a.jsx)(r.p,{children:"If you need the to pass the username from storage canister , you can pass it in the args. While the storage index represents where the secrets will be stored in the storage canister"}),"\n",(0,a.jsx)(r.h3,{id:"how-to-read-and-write-data",children:"How to read and write data"}),"\n",(0,a.jsx)(r.p,{children:"Recovery canisters are meant to be stateless . But if the developer wants to store values ( like user emails or signature), you can call the storage canister in the recovery canister to store values. To do this you can use the following function in storage canister."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"#[query]\nasync fn read_recovery_storage_canister_bytes() -> Option<Vec<u8>> {}\n"})}),"\n",(0,a.jsxs)(r.p,{children:["When you call the function ",(0,a.jsx)(r.code,{children:"read_recovery_storage_canister_bytes"})," in recovery canister , it returns the storage bytes related to the recovery canister. If there is not storage it will return empty bytes"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"#[update]\nasync fn write_recovery_storage_canister_bytes(bytes: Vec<u8>) -> Result<(), String>{}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"example-of-reading-and-writing-data-in-recovery-canister",children:"Example of reading and writing data in recovery canister"}),"\n",(0,a.jsx)(r.p,{children:"You can check out this recovery canister, which needs to store users email on secret registration and reads it when user wants to verify."}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.a,{href:"https://github.com/hush-protocol/core-webapp/tree/main/src/backend/recovery/dkim_email_verifier",children:"DKIM Email Verifier"})})]})}function u(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>o});var a=t(6540);const n={},i=a.createContext(n);function s(e){const r=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),a.createElement(i.Provider,{value:r},e.children)}}}]);